// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmptyRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTagsRequest {
    #[prost(string, repeated, tag = "1")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTagsResponse {
    #[prost(string, tag = "1")]
    pub avatar: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageAnswerRequest {
    #[prost(string, tag = "1")]
    pub input: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub prompt: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub image_url: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub room_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub level: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageGenPromptRequest {
    #[prost(string, tag = "1")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub historical: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub architectural: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageContextResponse {
    #[prost(string, tag = "1")]
    pub context: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageContextRequest {
    #[prost(string, tag = "1")]
    pub image_url: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub prompt: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub input: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BecomeKolRequest {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinKolRoomRequest {
    #[prost(string, tag = "1")]
    pub kol: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub follower: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub key: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevealAnswerRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub room_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub level: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevealAnswerResponse {
    #[prost(string, tag = "1")]
    pub answer: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameAnswerRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub answer: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub room_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub level: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameAnswerResponse {
    #[prost(string, repeated, tag = "1")]
    pub correct_gamers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinRoomRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub room_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub level: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinRoomResponse {
    #[prost(int32, tag = "1")]
    pub scene_count: i32,
    #[prost(string, tag = "2")]
    pub last_scene: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageChatRequest {
    #[prost(string, tag = "1")]
    pub reply_to: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub image_url: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub room_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub level: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageChatResponse {
    #[prost(string, tag = "1")]
    pub answer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub answer_voice: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SvcImageDescriptionRequest {
    #[prost(string, tag = "1")]
    pub image_url: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SvcImageDescriptionResponse {
    #[prost(string, tag = "1")]
    pub description: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneRequest {
    #[prost(string, tag = "1")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub sample_image: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub room_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneResponse {
    #[prost(string, tag = "1")]
    pub scene_image: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShareKnowLedgesRequest {
    #[prost(string, tag = "1")]
    pub sig: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub owner: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KnowLedgesRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KnowLedgeInfo {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub sig: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub summary: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KnowLedgesResponse {
    #[prost(message, repeated, tag = "1")]
    pub knowledge_info: ::prost::alloc::vec::Vec<KnowLedgeInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DocumentSummaryRequest {
    #[prost(string, tag = "1")]
    pub document: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DocumentSummaryResponse {
    #[prost(string, tag = "1")]
    pub summary: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEmbeddingRequest {
    #[prost(string, tag = "1")]
    pub query: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub collection_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEmbeddingResponse {
    #[prost(string, tag = "1")]
    pub result: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummaryAndEmbeddingResponse {
    #[prost(string, tag = "1")]
    pub knowledge_file_sig: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub transcript_file_sig: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummaryAndEmbeddingRequest {
    #[prost(string, tag = "1")]
    pub link: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub knowledge_file: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub transcript_file: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub knowledge_file_sig: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub transcript_file_sig: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub link_sig: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GoTownRequest {
    #[prost(string, tag = "1")]
    pub town: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub topic: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EditeReqeust {
    #[prost(string, tag = "1")]
    pub initial: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub kol: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub messages: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContinueRequest {
    #[prost(string, tag = "1")]
    pub session: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub date: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub continued: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstructRequest {
    #[prost(string, tag = "1")]
    pub reply_to: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub kol: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstructResponse {
    #[prost(string, tag = "1")]
    pub answer: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateLiveSessionRequest {
    #[prost(string, tag = "6")]
    pub session: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RestoreLiveRequest {
    #[prost(string, tag = "2")]
    pub session: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContinueLiveRequest {
    #[prost(string, repeated, tag = "1")]
    pub roles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "2")]
    pub session: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContinueLiveResponse {
    #[prost(string, tag = "1")]
    pub role_1_talk: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub role_2_talk: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub session: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenLiveRequest {
    #[prost(string, tag = "1")]
    pub role_1_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub role_2_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub live_topic: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub session: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenLiveResponse {
    #[prost(string, tag = "1")]
    pub cover: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub room_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventResponse {
    #[prost(string, repeated, tag = "1")]
    pub events: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TalkResponse {
    #[prost(string, tag = "1")]
    pub speaker: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageRequest {
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub subject: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub prompt: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PatoNameResponse {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PatoIssResponse {
    #[prost(string, tag = "1")]
    pub iss: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PatoIssEditRequest {
    #[prost(string, tag = "1")]
    pub iss: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMessageRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub date: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProMessageRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub date: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub proid: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArchiveMessageRequest {
    #[prost(string, tag = "1")]
    pub session: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub date: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMessageResponse {
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventRequest {
    #[prost(string, tag = "1")]
    pub topic: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub topic: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod meta_power_matrix_battery_svc_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MetaPowerMatrixBatterySvcClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MetaPowerMatrixBatterySvcClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MetaPowerMatrixBatterySvcClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MetaPowerMatrixBatterySvcClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MetaPowerMatrixBatterySvcClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn talk(
            &mut self,
            request: impl tonic::IntoRequest<super::MessageRequest>,
        ) -> std::result::Result<tonic::Response<super::TalkResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/talk",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "talk",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_event(
            &mut self,
            request: impl tonic::IntoRequest<super::EventRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/CreateEvent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "CreateEvent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_chat_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::GetMessageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetMessageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/GetChatMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "GetChatMessages",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_pato_event(
            &mut self,
            request: impl tonic::IntoRequest<super::EmptyRequest>,
        ) -> std::result::Result<tonic::Response<super::EventResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestPatoEvent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestPatoEvent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_pato_name(
            &mut self,
            request: impl tonic::IntoRequest<super::EmptyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PatoNameResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestPatoName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestPatoName",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_pato_iss(
            &mut self,
            request: impl tonic::IntoRequest<super::EmptyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PatoIssResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestPatoISS",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestPatoISS",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_pato_iss(
            &mut self,
            request: impl tonic::IntoRequest<super::PatoIssEditRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/ChangePatoISS",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "ChangePatoISS",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_pato_call(
            &mut self,
            request: impl tonic::IntoRequest<super::CallRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestPatoCall",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestPatoCall",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn archive_chat_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::ArchiveMessageRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/ArchiveChatMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "ArchiveChatMessages",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_open_live(
            &mut self,
            request: impl tonic::IntoRequest<super::OpenLiveRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OpenLiveResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestOpenLive",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestOpenLive",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_continue_live(
            &mut self,
            request: impl tonic::IntoRequest<super::ContinueLiveRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestContinueLive",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestContinueLive",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_create_live_session(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateLiveSessionRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestCreateLiveSession",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestCreateLiveSession",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_end_live(
            &mut self,
            request: impl tonic::IntoRequest<super::EmptyRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestEndLive",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestEndLive",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_restore_live(
            &mut self,
            request: impl tonic::IntoRequest<super::RestoreLiveRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestRestoreLive",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestRestoreLive",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_instruct(
            &mut self,
            request: impl tonic::IntoRequest<super::InstructRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InstructResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestInstruct",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestInstruct",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_pro_chat_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::GetProMessageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetMessageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/GetProChatMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "GetProChatMessages",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_continue_chat(
            &mut self,
            request: impl tonic::IntoRequest<super::ContinueRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestContinueChat",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestContinueChat",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_edit_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::EditeReqeust>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestEditMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestEditMessages",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_go_town(
            &mut self,
            request: impl tonic::IntoRequest<super::GoTownRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestGoTown",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestGoTown",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_summary_and_embedding(
            &mut self,
            request: impl tonic::IntoRequest<super::SummaryAndEmbeddingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SummaryAndEmbeddingResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestSummaryAndEmbedding",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestSummaryAndEmbedding",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_query_embedding(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryEmbeddingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryEmbeddingResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestQueryEmbedding",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestQueryEmbedding",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_document_summary(
            &mut self,
            request: impl tonic::IntoRequest<super::DocumentSummaryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DocumentSummaryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestDocumentSummary",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestDocumentSummary",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_pato_knowledges(
            &mut self,
            request: impl tonic::IntoRequest<super::KnowLedgesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::KnowLedgesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestPatoKnowledges",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestPatoKnowledges",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_share_knowledge(
            &mut self,
            request: impl tonic::IntoRequest<super::ShareKnowLedgesRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestShareKnowledge",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestShareKnowledge",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn add_shared_knowledge(
            &mut self,
            request: impl tonic::IntoRequest<super::ShareKnowLedgesRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/AddSharedKnowledge",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "AddSharedKnowledge",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_generate_scene(
            &mut self,
            request: impl tonic::IntoRequest<super::SceneRequest>,
        ) -> std::result::Result<tonic::Response<super::SceneResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestGenerateScene",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestGenerateScene",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_image_description(
            &mut self,
            request: impl tonic::IntoRequest<super::SvcImageDescriptionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SvcImageDescriptionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestImageDescription",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestImageDescription",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_chat_with_image(
            &mut self,
            request: impl tonic::IntoRequest<super::ImageChatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ImageChatResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestChatWithImage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestChatWithImage",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_join_room(
            &mut self,
            request: impl tonic::IntoRequest<super::JoinRoomRequest>,
        ) -> std::result::Result<
            tonic::Response<super::JoinRoomResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestJoinRoom",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestJoinRoom",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_clue_from_image_chat(
            &mut self,
            request: impl tonic::IntoRequest<super::ImageChatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ImageChatResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestClueFromImageChat",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestClueFromImageChat",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn receive_game_answer(
            &mut self,
            request: impl tonic::IntoRequest<super::GameAnswerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GameAnswerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/ReceiveGameAnswer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "ReceiveGameAnswer",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn accept_game_answer(
            &mut self,
            request: impl tonic::IntoRequest<super::EmptyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GameAnswerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/AcceptGameAnswer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "AcceptGameAnswer",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_answer_image(
            &mut self,
            request: impl tonic::IntoRequest<super::ImageAnswerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ImageContextResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestAnswerImage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestAnswerImage",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_reveal_answer(
            &mut self,
            request: impl tonic::IntoRequest<super::RevealAnswerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RevealAnswerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestRevealAnswer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestRevealAnswer",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn become_kol(
            &mut self,
            request: impl tonic::IntoRequest<super::BecomeKolRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/BecomeKOL",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "BecomeKOL",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_join_kol_room(
            &mut self,
            request: impl tonic::IntoRequest<super::JoinKolRoomRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestJoinKOLRoom",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestJoinKOLRoom",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_image_context(
            &mut self,
            request: impl tonic::IntoRequest<super::ImageContextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ImageContextResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestImageContext",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestImageContext",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_image_gen_prompt(
            &mut self,
            request: impl tonic::IntoRequest<super::ImageGenPromptRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ImageContextResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestImageGenPrompt",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestImageGenPrompt",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_self_talk_for_today_plan(
            &mut self,
            request: impl tonic::IntoRequest<super::EmptyRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestSelfTalkForTodayPlan",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestSelfTalkForTodayPlan",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_submit_tags(
            &mut self,
            request: impl tonic::IntoRequest<super::SubmitTagsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitTagsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestSubmitTags",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "RequestSubmitTags",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn join_marriage(
            &mut self,
            request: impl tonic::IntoRequest<super::BecomeKolRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/JoinMarriage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "JoinMarriage",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn like_marriage_owner(
            &mut self,
            request: impl tonic::IntoRequest<super::JoinKolRoomRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/LikeMarriageOwner",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "metapowermatrix_battery.MetaPowerMatrixBatterySvc",
                        "LikeMarriageOwner",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod meta_power_matrix_battery_svc_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MetaPowerMatrixBatterySvcServer.
    #[async_trait]
    pub trait MetaPowerMatrixBatterySvc: Send + Sync + 'static {
        async fn talk(
            &self,
            request: tonic::Request<super::MessageRequest>,
        ) -> std::result::Result<tonic::Response<super::TalkResponse>, tonic::Status>;
        async fn create_event(
            &self,
            request: tonic::Request<super::EventRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn get_chat_messages(
            &self,
            request: tonic::Request<super::GetMessageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetMessageResponse>,
            tonic::Status,
        >;
        async fn request_pato_event(
            &self,
            request: tonic::Request<super::EmptyRequest>,
        ) -> std::result::Result<tonic::Response<super::EventResponse>, tonic::Status>;
        async fn request_pato_name(
            &self,
            request: tonic::Request<super::EmptyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PatoNameResponse>,
            tonic::Status,
        >;
        async fn request_pato_iss(
            &self,
            request: tonic::Request<super::EmptyRequest>,
        ) -> std::result::Result<tonic::Response<super::PatoIssResponse>, tonic::Status>;
        async fn change_pato_iss(
            &self,
            request: tonic::Request<super::PatoIssEditRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn request_pato_call(
            &self,
            request: tonic::Request<super::CallRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn archive_chat_messages(
            &self,
            request: tonic::Request<super::ArchiveMessageRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn request_open_live(
            &self,
            request: tonic::Request<super::OpenLiveRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OpenLiveResponse>,
            tonic::Status,
        >;
        async fn request_continue_live(
            &self,
            request: tonic::Request<super::ContinueLiveRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn request_create_live_session(
            &self,
            request: tonic::Request<super::CreateLiveSessionRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn request_end_live(
            &self,
            request: tonic::Request<super::EmptyRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn request_restore_live(
            &self,
            request: tonic::Request<super::RestoreLiveRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn request_instruct(
            &self,
            request: tonic::Request<super::InstructRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InstructResponse>,
            tonic::Status,
        >;
        async fn get_pro_chat_messages(
            &self,
            request: tonic::Request<super::GetProMessageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetMessageResponse>,
            tonic::Status,
        >;
        async fn request_continue_chat(
            &self,
            request: tonic::Request<super::ContinueRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn request_edit_messages(
            &self,
            request: tonic::Request<super::EditeReqeust>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn request_go_town(
            &self,
            request: tonic::Request<super::GoTownRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn request_summary_and_embedding(
            &self,
            request: tonic::Request<super::SummaryAndEmbeddingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SummaryAndEmbeddingResponse>,
            tonic::Status,
        >;
        async fn request_query_embedding(
            &self,
            request: tonic::Request<super::QueryEmbeddingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryEmbeddingResponse>,
            tonic::Status,
        >;
        async fn request_document_summary(
            &self,
            request: tonic::Request<super::DocumentSummaryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DocumentSummaryResponse>,
            tonic::Status,
        >;
        async fn request_pato_knowledges(
            &self,
            request: tonic::Request<super::KnowLedgesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::KnowLedgesResponse>,
            tonic::Status,
        >;
        async fn request_share_knowledge(
            &self,
            request: tonic::Request<super::ShareKnowLedgesRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn add_shared_knowledge(
            &self,
            request: tonic::Request<super::ShareKnowLedgesRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn request_generate_scene(
            &self,
            request: tonic::Request<super::SceneRequest>,
        ) -> std::result::Result<tonic::Response<super::SceneResponse>, tonic::Status>;
        async fn request_image_description(
            &self,
            request: tonic::Request<super::SvcImageDescriptionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SvcImageDescriptionResponse>,
            tonic::Status,
        >;
        async fn request_chat_with_image(
            &self,
            request: tonic::Request<super::ImageChatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ImageChatResponse>,
            tonic::Status,
        >;
        async fn request_join_room(
            &self,
            request: tonic::Request<super::JoinRoomRequest>,
        ) -> std::result::Result<
            tonic::Response<super::JoinRoomResponse>,
            tonic::Status,
        >;
        async fn request_clue_from_image_chat(
            &self,
            request: tonic::Request<super::ImageChatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ImageChatResponse>,
            tonic::Status,
        >;
        async fn receive_game_answer(
            &self,
            request: tonic::Request<super::GameAnswerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GameAnswerResponse>,
            tonic::Status,
        >;
        async fn accept_game_answer(
            &self,
            request: tonic::Request<super::EmptyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GameAnswerResponse>,
            tonic::Status,
        >;
        async fn request_answer_image(
            &self,
            request: tonic::Request<super::ImageAnswerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ImageContextResponse>,
            tonic::Status,
        >;
        async fn request_reveal_answer(
            &self,
            request: tonic::Request<super::RevealAnswerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RevealAnswerResponse>,
            tonic::Status,
        >;
        async fn become_kol(
            &self,
            request: tonic::Request<super::BecomeKolRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn request_join_kol_room(
            &self,
            request: tonic::Request<super::JoinKolRoomRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn request_image_context(
            &self,
            request: tonic::Request<super::ImageContextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ImageContextResponse>,
            tonic::Status,
        >;
        async fn request_image_gen_prompt(
            &self,
            request: tonic::Request<super::ImageGenPromptRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ImageContextResponse>,
            tonic::Status,
        >;
        async fn request_self_talk_for_today_plan(
            &self,
            request: tonic::Request<super::EmptyRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn request_submit_tags(
            &self,
            request: tonic::Request<super::SubmitTagsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitTagsResponse>,
            tonic::Status,
        >;
        async fn join_marriage(
            &self,
            request: tonic::Request<super::BecomeKolRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
        async fn like_marriage_owner(
            &self,
            request: tonic::Request<super::JoinKolRoomRequest>,
        ) -> std::result::Result<tonic::Response<super::EmptyRequest>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct MetaPowerMatrixBatterySvcServer<T: MetaPowerMatrixBatterySvc> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: MetaPowerMatrixBatterySvc> MetaPowerMatrixBatterySvcServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for MetaPowerMatrixBatterySvcServer<T>
    where
        T: MetaPowerMatrixBatterySvc,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/talk" => {
                    #[allow(non_camel_case_types)]
                    struct talkSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::MessageRequest> for talkSvc<T> {
                        type Response = super::TalkResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MessageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::talk(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = talkSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/CreateEvent" => {
                    #[allow(non_camel_case_types)]
                    struct CreateEventSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::EventRequest>
                    for CreateEventSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EventRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::create_event(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreateEventSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/GetChatMessages" => {
                    #[allow(non_camel_case_types)]
                    struct GetChatMessagesSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::GetMessageRequest>
                    for GetChatMessagesSvc<T> {
                        type Response = super::GetMessageResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetMessageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::get_chat_messages(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetChatMessagesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestPatoEvent" => {
                    #[allow(non_camel_case_types)]
                    struct RequestPatoEventSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::EmptyRequest>
                    for RequestPatoEventSvc<T> {
                        type Response = super::EventResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EmptyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_pato_event(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestPatoEventSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestPatoName" => {
                    #[allow(non_camel_case_types)]
                    struct RequestPatoNameSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::EmptyRequest>
                    for RequestPatoNameSvc<T> {
                        type Response = super::PatoNameResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EmptyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_pato_name(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestPatoNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestPatoISS" => {
                    #[allow(non_camel_case_types)]
                    struct RequestPatoISSSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::EmptyRequest>
                    for RequestPatoISSSvc<T> {
                        type Response = super::PatoIssResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EmptyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_pato_iss(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestPatoISSSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/ChangePatoISS" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePatoISSSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::PatoIssEditRequest>
                    for ChangePatoISSSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PatoIssEditRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::change_pato_iss(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ChangePatoISSSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestPatoCall" => {
                    #[allow(non_camel_case_types)]
                    struct RequestPatoCallSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::CallRequest>
                    for RequestPatoCallSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CallRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_pato_call(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestPatoCallSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/ArchiveChatMessages" => {
                    #[allow(non_camel_case_types)]
                    struct ArchiveChatMessagesSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::ArchiveMessageRequest>
                    for ArchiveChatMessagesSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ArchiveMessageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::archive_chat_messages(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ArchiveChatMessagesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestOpenLive" => {
                    #[allow(non_camel_case_types)]
                    struct RequestOpenLiveSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::OpenLiveRequest>
                    for RequestOpenLiveSvc<T> {
                        type Response = super::OpenLiveResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OpenLiveRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_open_live(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestOpenLiveSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestContinueLive" => {
                    #[allow(non_camel_case_types)]
                    struct RequestContinueLiveSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::ContinueLiveRequest>
                    for RequestContinueLiveSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ContinueLiveRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_continue_live(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestContinueLiveSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestCreateLiveSession" => {
                    #[allow(non_camel_case_types)]
                    struct RequestCreateLiveSessionSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::CreateLiveSessionRequest>
                    for RequestCreateLiveSessionSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateLiveSessionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_create_live_session(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestCreateLiveSessionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestEndLive" => {
                    #[allow(non_camel_case_types)]
                    struct RequestEndLiveSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::EmptyRequest>
                    for RequestEndLiveSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EmptyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_end_live(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestEndLiveSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestRestoreLive" => {
                    #[allow(non_camel_case_types)]
                    struct RequestRestoreLiveSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::RestoreLiveRequest>
                    for RequestRestoreLiveSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RestoreLiveRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_restore_live(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestRestoreLiveSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestInstruct" => {
                    #[allow(non_camel_case_types)]
                    struct RequestInstructSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::InstructRequest>
                    for RequestInstructSvc<T> {
                        type Response = super::InstructResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InstructRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_instruct(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestInstructSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/GetProChatMessages" => {
                    #[allow(non_camel_case_types)]
                    struct GetProChatMessagesSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::GetProMessageRequest>
                    for GetProChatMessagesSvc<T> {
                        type Response = super::GetMessageResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetProMessageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::get_pro_chat_messages(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetProChatMessagesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestContinueChat" => {
                    #[allow(non_camel_case_types)]
                    struct RequestContinueChatSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::ContinueRequest>
                    for RequestContinueChatSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ContinueRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_continue_chat(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestContinueChatSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestEditMessages" => {
                    #[allow(non_camel_case_types)]
                    struct RequestEditMessagesSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::EditeReqeust>
                    for RequestEditMessagesSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EditeReqeust>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_edit_messages(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestEditMessagesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestGoTown" => {
                    #[allow(non_camel_case_types)]
                    struct RequestGoTownSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::GoTownRequest>
                    for RequestGoTownSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GoTownRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_go_town(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestGoTownSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestSummaryAndEmbedding" => {
                    #[allow(non_camel_case_types)]
                    struct RequestSummaryAndEmbeddingSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::SummaryAndEmbeddingRequest>
                    for RequestSummaryAndEmbeddingSvc<T> {
                        type Response = super::SummaryAndEmbeddingResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SummaryAndEmbeddingRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_summary_and_embedding(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestSummaryAndEmbeddingSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestQueryEmbedding" => {
                    #[allow(non_camel_case_types)]
                    struct RequestQueryEmbeddingSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::QueryEmbeddingRequest>
                    for RequestQueryEmbeddingSvc<T> {
                        type Response = super::QueryEmbeddingResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryEmbeddingRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_query_embedding(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestQueryEmbeddingSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestDocumentSummary" => {
                    #[allow(non_camel_case_types)]
                    struct RequestDocumentSummarySvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::DocumentSummaryRequest>
                    for RequestDocumentSummarySvc<T> {
                        type Response = super::DocumentSummaryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DocumentSummaryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_document_summary(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestDocumentSummarySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestPatoKnowledges" => {
                    #[allow(non_camel_case_types)]
                    struct RequestPatoKnowledgesSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::KnowLedgesRequest>
                    for RequestPatoKnowledgesSvc<T> {
                        type Response = super::KnowLedgesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::KnowLedgesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_pato_knowledges(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestPatoKnowledgesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestShareKnowledge" => {
                    #[allow(non_camel_case_types)]
                    struct RequestShareKnowledgeSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::ShareKnowLedgesRequest>
                    for RequestShareKnowledgeSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ShareKnowLedgesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_share_knowledge(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestShareKnowledgeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/AddSharedKnowledge" => {
                    #[allow(non_camel_case_types)]
                    struct AddSharedKnowledgeSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::ShareKnowLedgesRequest>
                    for AddSharedKnowledgeSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ShareKnowLedgesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::add_shared_knowledge(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AddSharedKnowledgeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestGenerateScene" => {
                    #[allow(non_camel_case_types)]
                    struct RequestGenerateSceneSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::SceneRequest>
                    for RequestGenerateSceneSvc<T> {
                        type Response = super::SceneResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SceneRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_generate_scene(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestGenerateSceneSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestImageDescription" => {
                    #[allow(non_camel_case_types)]
                    struct RequestImageDescriptionSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::SvcImageDescriptionRequest>
                    for RequestImageDescriptionSvc<T> {
                        type Response = super::SvcImageDescriptionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SvcImageDescriptionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_image_description(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestImageDescriptionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestChatWithImage" => {
                    #[allow(non_camel_case_types)]
                    struct RequestChatWithImageSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::ImageChatRequest>
                    for RequestChatWithImageSvc<T> {
                        type Response = super::ImageChatResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ImageChatRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_chat_with_image(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestChatWithImageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestJoinRoom" => {
                    #[allow(non_camel_case_types)]
                    struct RequestJoinRoomSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::JoinRoomRequest>
                    for RequestJoinRoomSvc<T> {
                        type Response = super::JoinRoomResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::JoinRoomRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_join_room(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestJoinRoomSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestClueFromImageChat" => {
                    #[allow(non_camel_case_types)]
                    struct RequestClueFromImageChatSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::ImageChatRequest>
                    for RequestClueFromImageChatSvc<T> {
                        type Response = super::ImageChatResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ImageChatRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_clue_from_image_chat(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestClueFromImageChatSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/ReceiveGameAnswer" => {
                    #[allow(non_camel_case_types)]
                    struct ReceiveGameAnswerSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::GameAnswerRequest>
                    for ReceiveGameAnswerSvc<T> {
                        type Response = super::GameAnswerResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GameAnswerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::receive_game_answer(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ReceiveGameAnswerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/AcceptGameAnswer" => {
                    #[allow(non_camel_case_types)]
                    struct AcceptGameAnswerSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::EmptyRequest>
                    for AcceptGameAnswerSvc<T> {
                        type Response = super::GameAnswerResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EmptyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::accept_game_answer(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AcceptGameAnswerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestAnswerImage" => {
                    #[allow(non_camel_case_types)]
                    struct RequestAnswerImageSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::ImageAnswerRequest>
                    for RequestAnswerImageSvc<T> {
                        type Response = super::ImageContextResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ImageAnswerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_answer_image(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestAnswerImageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestRevealAnswer" => {
                    #[allow(non_camel_case_types)]
                    struct RequestRevealAnswerSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::RevealAnswerRequest>
                    for RequestRevealAnswerSvc<T> {
                        type Response = super::RevealAnswerResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RevealAnswerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_reveal_answer(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestRevealAnswerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/BecomeKOL" => {
                    #[allow(non_camel_case_types)]
                    struct BecomeKOLSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::BecomeKolRequest>
                    for BecomeKOLSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BecomeKolRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::become_kol(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = BecomeKOLSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestJoinKOLRoom" => {
                    #[allow(non_camel_case_types)]
                    struct RequestJoinKOLRoomSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::JoinKolRoomRequest>
                    for RequestJoinKOLRoomSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::JoinKolRoomRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_join_kol_room(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestJoinKOLRoomSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestImageContext" => {
                    #[allow(non_camel_case_types)]
                    struct RequestImageContextSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::ImageContextRequest>
                    for RequestImageContextSvc<T> {
                        type Response = super::ImageContextResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ImageContextRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_image_context(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestImageContextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestImageGenPrompt" => {
                    #[allow(non_camel_case_types)]
                    struct RequestImageGenPromptSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::ImageGenPromptRequest>
                    for RequestImageGenPromptSvc<T> {
                        type Response = super::ImageContextResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ImageGenPromptRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_image_gen_prompt(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestImageGenPromptSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestSelfTalkForTodayPlan" => {
                    #[allow(non_camel_case_types)]
                    struct RequestSelfTalkForTodayPlanSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::EmptyRequest>
                    for RequestSelfTalkForTodayPlanSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EmptyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_self_talk_for_today_plan(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestSelfTalkForTodayPlanSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/RequestSubmitTags" => {
                    #[allow(non_camel_case_types)]
                    struct RequestSubmitTagsSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::SubmitTagsRequest>
                    for RequestSubmitTagsSvc<T> {
                        type Response = super::SubmitTagsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubmitTagsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::request_submit_tags(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestSubmitTagsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/JoinMarriage" => {
                    #[allow(non_camel_case_types)]
                    struct JoinMarriageSvc<T: MetaPowerMatrixBatterySvc>(pub Arc<T>);
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::BecomeKolRequest>
                    for JoinMarriageSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BecomeKolRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::join_marriage(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = JoinMarriageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/metapowermatrix_battery.MetaPowerMatrixBatterySvc/LikeMarriageOwner" => {
                    #[allow(non_camel_case_types)]
                    struct LikeMarriageOwnerSvc<T: MetaPowerMatrixBatterySvc>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetaPowerMatrixBatterySvc,
                    > tonic::server::UnaryService<super::JoinKolRoomRequest>
                    for LikeMarriageOwnerSvc<T> {
                        type Response = super::EmptyRequest;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::JoinKolRoomRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetaPowerMatrixBatterySvc>::like_marriage_owner(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = LikeMarriageOwnerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: MetaPowerMatrixBatterySvc> Clone for MetaPowerMatrixBatterySvcServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: MetaPowerMatrixBatterySvc> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: MetaPowerMatrixBatterySvc> tonic::server::NamedService
    for MetaPowerMatrixBatterySvcServer<T> {
        const NAME: &'static str = "metapowermatrix_battery.MetaPowerMatrixBatterySvc";
    }
}
